diff --git a/dstar_monitor.cpp b/dstar_monitor.cpp
index 2c96d8c..45db160 100644
--- a/dstar_monitor.cpp
+++ b/dstar_monitor.cpp
@@ -51,12 +51,14 @@ DstarMonitor::DstarMonitor(QWidget *parent) :
 
 	audio = new QAudioOutput(format, this);
 	audiotimer = new QTimer();
+	ping_timer = new QTimer();
 	connect(audio, SIGNAL(stateChanged(QAudio::State)), this, SLOT(handleStateChanged(QAudio::State)));
 
 	connect_status = DISCONNECTED;
 
 	connect(udp, SIGNAL(readyRead()), this, SLOT(readyRead()));
 	connect(audiotimer, SIGNAL(timeout()), this, SLOT(process_audio()));
+	connect(ping_timer, SIGNAL(timeout()), this, SLOT(process_ping()));
 	audiotimer->start(19);
 	process_hosts();
 	process_settings();
@@ -102,11 +104,9 @@ void DstarMonitor::init_gui()
 	ui->urcall->setTextInteractionFlags(Qt::TextSelectableByMouse);
 	ui->streamid->setTextInteractionFlags(Qt::TextSelectableByMouse);
 	ui->usertxt->setTextInteractionFlags(Qt::TextSelectableByMouse);
-	ui->comboMod->addItem(QStringLiteral("A"), 0x41);
-	ui->comboMod->addItem(QStringLiteral("B"), 0x42);
-	ui->comboMod->addItem(QStringLiteral("C"), 0x43);
-	ui->comboMod->addItem(QStringLiteral("D"), 0x44);
-	ui->comboMod->addItem(QStringLiteral("E"), 0x45);
+	for(char m = 0x41; m < 0x5b; ++m){
+		ui->comboMod->addItem(QString(m));
+	}
 	ui->hostCombo->setEditable(true);
 }
 
@@ -239,6 +239,7 @@ void DstarMonitor::process_connect()
 		host = ui->hostCombo->currentData().toString().simplified();
 		callsign = ui->callsignEdit->text();
 		module = ui->comboMod->currentText().toStdString()[0];
+		protocol = ui->hostCombo->currentText().toStdString()[0];
 		QHostInfo::lookupHost(host, this, SLOT(hostname_lookup(QHostInfo)));
 		audiodev = audio->start();
 	}
@@ -247,15 +248,30 @@ void DstarMonitor::process_connect()
 void DstarMonitor::hostname_lookup(QHostInfo i)
 {
 	QByteArray d;
-	d[0] = 0x05;
-	d[1] = 0x00;
-	d[2] = 0x18;
-	d[3] = 0x00;
-	d[4] = 0x01;
+	int p;
+	if(protocol == 'R'){
+		d[0] = 0x05;
+		d[1] = 0x00;
+		d[2] = 0x18;
+		d[3] = 0x00;
+		d[4] = 0x01;
+		p = 20001;
+	}
+	else if(protocol == 'X'){
+		d[0] = 'R';
+		d[1] = 'P';
+		d[2] = 'T';
+		d[3] = 'L';
+		d[7] = 0xd2;
+		d[6] = 0xb4;
+		d[5] = 0x2f;
+		d[4] = 0x00;
+		p = 62030;
+	}
 	if (!i.addresses().isEmpty()) {
 		address = i.addresses().first();
-		udp->bind(address, 20001);
-		udp->writeDatagram(d, address, 20001);
+		//udp->bind(20001);
+		udp->writeDatagram(d, address, p);
 	}
 }
 
@@ -280,6 +296,71 @@ void DstarMonitor::process_audio()
 }
 
 void DstarMonitor::readyRead()
+{
+	if(protocol == 'R'){
+		readyReadREF();
+	}
+	else if (protocol == 'X'){
+		readyReadXLX();
+	}
+}
+
+void DstarMonitor::process_ping()
+{
+	QByteArray out;
+	char tag[] = { 'R','P','T','P','I','N','G' };
+	out.clear();
+	out.append(tag, 7);
+	out[10] = 0xd2;
+	out[9] = 0xb4;
+	out[8] = 0x2f;
+	out[7] = 0x00;
+	udp->writeDatagram(out, address, 62030);
+}
+
+void DstarMonitor::readyReadXLX()
+{
+	QByteArray buf;
+	QByteArray out;
+	QHostAddress sender;
+	quint16 senderPort;
+	buf.resize(udp->pendingDatagramSize());
+	udp->readDatagram(buf.data(), buf.size(), &sender, &senderPort);
+#ifdef DEBUG
+	fprintf(stderr, "RECV: ");
+	for(int i = 0; i < buf.size(); ++i){
+		fprintf(stderr, "%02x ", (unsigned char)buf.data()[i]);
+	}
+	fprintf(stderr, "\n");
+	fflush(stderr);
+#endif
+	if(buf.size() == 10){
+		out.clear();
+		out.resize(40);
+		out[0] = 'R';
+		out[1] = 'P';
+		out[2] = 'T';
+		out[3] = 'K';
+		out[7] = 0xd2;
+		out[6] = 0xb4;
+		out[5] = 0x2f;
+		out[4] = 0x00;
+		udp->writeDatagram(out, address, 62030);
+	}
+	else if(buf.size() == 6){
+		ping_timer->start(5000);
+	}
+/*
+	fprintf(stderr, "SEND: ");
+	for(int i = 0; i < out.size(); ++i){
+		fprintf(stderr, "%02x ", (unsigned char)out.data()[i]);
+	}
+	fprintf(stderr, "\n");
+	fflush(stderr);
+*/
+}
+
+void DstarMonitor::readyReadREF()
 {
 	QByteArray buf;
 	QByteArray out;
@@ -317,7 +398,7 @@ void DstarMonitor::readyRead()
 		out[17] = 0x00;
 		out[18] = 0x00;
 		out[19] = 0x00;
-		out.append("HS000000", 8);
+		out.append("DV123456", 8);
 		udp->writeDatagram(out, address, 20001);
 	}
 	if(buf.size() == 3){ //2 way keep alive ping
@@ -329,11 +410,33 @@ void DstarMonitor::readyRead()
 			s = "RO";
 		}
 		status_txt->setText(s + " Host: " + host + " Ping: " + QString::number(ping_cnt++));
-		out[0] = 0x03;
-		out[1] = 0x60;
-		out[2] = 0x00;
-		out.resize(3);
-		udp->writeDatagram(out, address, 20001);
+		if(ping_cnt % 60){
+			out[0] = 0x03;
+			out[1] = 0x60;
+			out[2] = 0x00;
+			out.resize(3);
+			udp->writeDatagram(out, address, 20001);
+		}
+		else{
+			out[0] = 0x1c;
+			out[1] = 0xc0;
+			out[2] = 0x04;
+			out[3] = 0x00;
+			out.append(callsign.toUpper().toLocal8Bit().data(), 6);
+			out[10] = 0x00;
+			out[11] = 0x00;
+			out[12] = 0x00;
+			out[13] = 0x00;
+			out[14] = 0x00;
+			out[15] = 0x00;
+			out[16] = 0x00;
+			out[17] = 0x00;
+			out[18] = 0x00;
+			out[19] = 0x00;
+			out.append("HS000000", 8);
+			out.resize(28);
+			udp->writeDatagram(out, address, 20001);
+		}
 	}
 	if((connect_status == CONNECTING) && (buf.size() == 0x08)){
 		if((buf.data()[4] == 0x4f) && (buf.data()[5] == 0x4b) && (buf.data()[6] == 0x52)){ // OKRW/OKRO response
@@ -370,8 +473,8 @@ void DstarMonitor::readyRead()
 #endif
 	if((buf.size() == 0x3a) && (!memcmp(buf.data()+1, header, 5)) && ((buf.data()[0x1b] == module) || (buf.data()[0x1b] == 'G')) ){ //58
 		streamid = (buf.data()[14] << 8) | (buf.data()[15] & 0xff);
-		memcpy(rptr1, buf.data() + 20, 8); rptr1[8] = '\0';
-		memcpy(rptr2, buf.data() + 28, 8); rptr2[8] = '\0';
+		memcpy(rptr2, buf.data() + 20, 8); rptr1[8] = '\0';
+		memcpy(rptr1, buf.data() + 28, 8); rptr2[8] = '\0';
 		memcpy(urcall, buf.data() + 36, 8); urcall[8] = '\0';
 		memcpy(mycall, buf.data() + 44, 8); mycall[8] = '\0';
 		ui->mycall->setText(QString(mycall));
@@ -382,7 +485,7 @@ void DstarMonitor::readyRead()
 	}
 	if((buf.size() == 0x1d) && (!memcmp(buf.data()+1, header, 5)) ){ //29
 		//for(int i = 0; i < buf.size(); ++i){
-		//    fprintf(stderr, "%02x ", (unsigned char)buf.data()[i]);
+		//	fprintf(stderr, "%02x ", (unsigned char)buf.data()[i]);
 		//}
 		//fprintf(stderr, "\n");
 		//fflush(stderr);
diff --git a/dstar_monitor.h b/dstar_monitor.h
index df7925c..90bf5c6 100644
--- a/dstar_monitor.h
+++ b/dstar_monitor.h
@@ -56,12 +56,14 @@ private:
 	QString callsign;
 	QString serial;
 	char module;
+	char protocol;
 	uint64_t ping_cnt;
 	MBEDecoder *mbe;
 	QAudioOutput *audio;
 	QIODevice *audiodev;
 	QByteArray user_data;
 	QTimer *audiotimer;
+	QTimer *ping_timer;
 	QString config_path;
 	QFile *hosts_file;
 	QLabel *status_txt;
@@ -71,11 +73,14 @@ private slots:
 	void about();
 	void process_connect();
 	void readyRead();
+	void readyReadREF();
+	void readyReadXLX();
 	void handleStateChanged(QAudio::State);
 	void hostname_lookup(QHostInfo);
 	void process_audio();
 	void process_hosts();
 	void process_settings();
+	void process_ping();
 	void load_hosts_file();
 	void start_request();
 	void http_finished(QNetworkReply *reply);
